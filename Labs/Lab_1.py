import numpy as npimport matplotlibmatplotlib.use("TkAgg")import matplotlib.pyplot as pltimport matplotlib.animation as animation# ---------------------------# Базові матричні перетворення# ---------------------------def translation_matrix(tx, ty):    """Матриця перенесення"""    return np.array([        [1, 0, tx],        [0, 1, ty],        [0, 0, 1]    ])def rotation_matrix(theta):    """Матриця обертання (кут у радіанах)"""    return np.array([        [np.cos(theta), -np.sin(theta), 0],        [np.sin(theta),  np.cos(theta), 0],        [0, 0, 1]    ])def apply_transform(points, matrix):    """Застосування матричного перетворення до множини точок"""    return matrix @ points# ---------------------------# Геометричний примітив: Прямокутник# ---------------------------def create_rectangle(x, y, w, h):    """Створення прямокутника у вигляді розширеної матриці координат"""    return np.array([        [x, x + w, x + w, x, x],  # X-координати        [y, y, y + h, y + h, y],  # Y-координати        [1, 1, 1, 1, 1]           # гомогенна координата    ])# ---------------------------# Анімація# ---------------------------# Створюємо прямокутникrect = create_rectangle(-1, -0.5, 2, 1)fig, ax = plt.subplots()ax.set_xlim(-5, 5)ax.set_ylim(-5, 5)ax.set_aspect("equal")line, = ax.plot([], [], "b-", linewidth=2)def init():    line.set_data([], [])    return line,def animate(i):    theta = np.radians(i)  # кут обертання    tx = 2 * np.cos(theta) # траєкторія по X    ty = 2 * np.sin(theta) # траєкторія по Y    # комбіноване перетворення: обертання + переміщення    transform = translation_matrix(tx, ty) @ rotation_matrix(theta)    new_rect = apply_transform(rect, transform)    line.set_data(new_rect[0, :], new_rect[1, :])    return line,ani = animation.FuncAnimation(fig, animate, frames=360, init_func=init, interval=30, blit=True)plt.show()